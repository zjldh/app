import win.ui;
/*DSG{{*/
winform = win.form(text="aardio工程25";right=759;bottom=469;border="none";mode="popup")
winform.add()
/*}}*/

import console;
import fsys.dlg;
import inet.whttp;
import process;
import process.popen;
import web.blink.form;
import web.json;
import web.script;



var wb = web.blink.form(winform);
wb.go("/html/host.html");

var configPath="/res/host/host";
var config = {};

function init(){
	config = web.json.parse(string.load(configPath)) || {};
	config.hostPath :="C:\Windows\System32\drivers\etc\hosts"; 
	config.hostList :={{host="127.0.0.1 www.baidu.com"}}
	
	
	
	config.proxyList :={{from="127.0.0.1";to="127.0.0.1:8080"}}
	sendConfig();
}



/*HOSTS{{*/

var changeHosts=function(host, enabled){
    var hostTmp = string.replace(host,"\s",'');
    hostTmp = string.upper(hostTmp);
    var lines={}
    var exist=false;
	for line in io.lines(config.hostPath) { 
		var tmp = string.upper(string.replace(line,"\s",''));
		// 存在一条 启用的
		if(hostTmp===tmp){
			exist = true
			if(!enabled){
				line = "#"+line;
			}
		}
		// 存在一条 禁用的
		if("#"+hostTmp === tmp){
			exist = true
			if(enabled){
				line = string.sub(line,2,#line);
			}
		}
    	table.push(lines,line)
	} 
	if(enabled && !exist){
		table.push(lines,host)
	}
	string.save(config.hostPath, string.join(lines,'\r\n'))
}

var dealHostStatus=function(hostList){
    var map = {};
    for k,v in hostList{
        hostList[k].enabled = false;
    	var tmp = string.upper(string.replace(v.host,"\s",''))
    	table.push(map,tmp)
    }
	for line in io.lines(config.hostPath) { 
		var tmp = string.upper(string.replace(line,"\s",''))
		if(#tmp>10){
			for i,v in hostList{
				if(tmp === map[i]){
					hostList[i].enabled = true;
				}
			}
		}
	}
	return hostList;
}



/*}}*/

function saveConfig(){
 	string.save(configPath, web.json.stringify(config));
}
function sendConfig(){
    config.hostList = dealHostStatus(config.hostList);
    config.proxyList = dealProxyStatus(config.proxyList);
	sendDataWithType("config",config);
	saveConfig()
}

wb.external = {};

wb.external.getConfig=function(){
	sendConfig();
}

// =======================================================   host
/*Host{{*/

wb.external.hostPathChange = function(){
  	var path = fsys.dlg.open("hosts文件|hosts|");
  	if(path){
  		config.hostPath = path;
  		saveConfig();
  	}
}
wb.external.hostPathOpen=function(){
    process.exploreSelect(config.hostPath)
}

function checkHostExist(index, host){
    var hostTmp = string.replace(host,"\s",'');
    hostTmp = string.upper(hostTmp);
	for k,v in config.hostList{
  		var tmp = string.upper(string.replace(v.host,"\s",''))
  		if(tmp == hostTmp && index!=k){
  			sendMsg("error",host+"已存在");
  			return true;
  		};
  	}
  	return false;
}
// 添加
wb.external.hostAdd=function(host){
    if(checkHostExist(-1, host)){
    	return;
    }
	table.push(config.hostList,{host=host})
  	sendMsg("success",host+"添加成功");
	sendConfig();
}
// 删除
wb.external.hostDelete = function(index){
	table.remove(config.hostList,index)
	sendMsg("success","删除成功");
	sendConfig();
};
// 编辑
wb.external.hostEdit = function(index, host, remark){
     if(checkHostExist(index, host)){
    	return;
    }
    
	config.hostList[index].host = host;
	config.hostList[index].remark = remark;
	sendMsg("success","编辑成功");
	sendConfig();
};
// 起停用
wb.external.hostSwitch = function(index){
   var item = config.hostList[index]
	var host =item.host;
	item.enabled = !item.enabled;
	changeHosts(item.host, item.enabled)
	sendMsg("success",item.host +"  "+(item.enabled ?"启用成功":"停用成功"));
	sendConfig();
};


/*}}*/

// =======================================================   host




// =======================================================   proxy
/*CMD{{*/

cmdPrefix = "netsh interface portproxy ";
cmdShow = cmdPrefix + "show all"
cmdReset = cmdPrefix + "reset"
cmdAdd = cmdPrefix + "add v4tov4 listenaddress=%s listenport=%s connectaddress=%s connectport=%s";
cmdDelete = cmdPrefix + "delete v4tov4 listenaddress=%s listenport=%s";


function cmdCall(cmd, func){
	var prcs = process.popen(, cmd)
	var rlt = prcs.peekTo('>')
	console.log(rlt)
	
	if(func){
		rlt = func(rlt)
	
	}
	prcs.process.terminate();
	prcs.close();
	return rlt;
}

function getProxyList(){
	return cmdCall(cmdShow, function(rlt){
		
		var list = string.split(rlt,'\n');
		var proxyList = {};
		var needRead = false;
		for k,v in list{
    		if(string.startWith(v, "---")){
        		needRead = true;
        		continue;
    		}
    		if(string.trim(v)!="" && needRead){
        		v = string.replace(v,"\s+"," ")
        		var t = string.split(v," ");
        		
        		console.log(t[1]+":"+t[2]+"   ->   "+t[3]+":"+t[4])
        		table.push(proxyList,{from=t[1]+":"+t[2] ; to =t[3]+":"+t[4] });
    		}
    	}
    	return proxyList;

	})
}

/*}}*/


function checkProxyExist(index, from ,to){
    var proxyTmp = string.replace(from+"---"+to,"\s",'');
    proxyTmp = string.upper(proxyTmp);
	for k,v in config.proxyList{
  		var tmp = string.upper(string.replace(v.from+"---"+v.to,"\s",''))
  		if(tmp == proxyTmp && index!=k){
  			sendMsg("error",from+"-->"+to+"已存在");
  			return true;
  		};
  	}
  	return false;
}

function dealProxyStatus(proxyList){
	var list = getProxyList();
	var map = {};
    for k,v in proxyList{
        proxyList[k].enabled = false;
    	var tmp = string.upper(string.replace(v.from+"--"+v.to,"\s",''))
    	table.push(map,tmp)
    }
	for k,v in list { 
		var tmp = string.upper(string.replace(v.from+"--"+v.to,"\s",''))
		for i,v in proxyList{
			if(tmp === map[i]){
				proxyList[i].enabled = true;
			}
		}
	}
	return proxyList;
}
// 添加
wb.external.proxyAdd=function(from ,to){
    console.log("add")
    if(checkProxyExist(-1, from,to)){
    	return;
    }
	table.push(config.proxyList,{from=from; to=to})
  	sendMsg("success",from+"->"+to+"添加成功");
	sendConfig();
}
// 删除
wb.external.proxyDelete = function(index){
    console.log("delete",index)
	table.remove(config.proxyList,index)
	sendMsg("success","删除成功");
	sendConfig();
};
// 编辑
wb.external.proxyEdit = function(index, from,to, remark){
    if(checkProxyExist(index, from,to)){
    	return;
    }
    
	config.proxyList[index].from = from;
	config.proxyList[index].to = to;
	config.proxyList[index].remark = remark;
	sendMsg("success","编辑成功");
	sendConfig();
};
// 起停用
wb.external.proxySwitch = function(index){
	var item = config.proxyList[index]
	item.enabled = !item.enabled;
	var list = string.split(item.from+":"+item.to,":");
	var rlt ="";
	if(item.enable){
		rlt = cmdCall(string.format(cmdAdd,list[1],list[2],list[3],list[4] ))	
	}else{
		rlt = cmdCall(string.format(cmdDelete,list[1],list[2] ))	
	}
	if(string.indexOf(rlt,"管理员")){
		console.log("xxx",rlt)
		sendMsg("error","权限不足，请以管理员身份运行此程序")
		return;
	}
	sendMsg("success",item.from+"->"+item.to +"  "+(item.enabled ?"启用成功":"停用成功"));
	sendConfig();
};

wb.external.proxyReset = function(index){
	cmdCall(cmdReset)
	for k,v in config.proxyList{
		v.enabled=false;
	}
	sendConfig();
};

wb.external.proxyShow = function(index){
	proxyList = getProxyList();
	var msg = "<b>当前配置:</b><div>"
	for k,v in proxyList{
		msg +=v.from+"  ->  "+v.to+"<br/>"
	}
	msg +="</div>";
	sendMsg("success",msg);
};



// =======================================================   proxy

/*文件监视{{*/
import fsys.dirWatcher;
var watchDir="/html";
var startWatch=function(){
	winform.thrdWatcher = fsys.dirWatcher.thread(
	function(filename,action,actionText){
		wb.go("/html/host.html");
		
	}, watchDir); ;
}

var stopWatch=function(){
	if(!winform.thrdWatcher) return; 
    winform.thrdWatcher.close(); //停止监视文件
}

/*}}*/

/*基本{{*/

wb.external.hitCaption = function(){winform.hitCaption();};
wb.external.close = function(){winform.close();};
   

function sendData(data){
    var json =web.json.stringify(data);
	wb.doScript("onDataChange("+json+")")
}
function sendDataWithType(t,d){
    var data={};
    data.type=t;
    data.data = d;
    sendData(data);
}
function sendMsg(typex, msg){
	wb.doScript(string.format("onMsg('%s','%s')", typex, msg))
}
//添加阴影
import win.ui.shadow;
win.ui.shadow(winform);

//限定最大化范围
import win.ui.minmax;
win.ui.minmax(winform);
/*}}*/
startWatch();
winform.onClose = function(hwnd,message,wParam,lParam){
   	saveConfig();
   	stopWatch();
}

wb.wait();
init();
winform.show();

//win.setTopmost(winform.hwnd,true)
win.loopMessage();
